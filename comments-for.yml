class CommentsFor < Dynasnip
  snip_name 'comments-for'

  def get(snip_name=nil?)
    snip_name = snip_name || app.request.params[:snip]
    return 'usage' if self.class.snip_name == snip_name
    comments = Soup.sieve(:commenting_on => snip_name)
    comments_html = if app.request.snip_name == snip_name
      "<h2>Comments</h2><ol class='comments'>" + comments.map do |comment| \
        "<li>" + app.render(comment) + "</li>" 
      end.join + "</ol>"
    else
     %{<a href="#{url_to(snip_name)}">#{comments.length} comments for #{snip_name}</a>}
    end
    return comments_html #+ comments_form.gsub('SNIP_NAME', snip_name)
  end

  def post(snip_name)
    # accept a new comment
  end

  self
end--- # Soup attributes
:render_as: Ruby
:updated_at: 2008-06-03 13:07:43 +01:00
:name: comments-for
:created_at: 2008-06-02 14:28:53 +01:00
:usage: (Some description about how to use the comments-for dyna goes here)
:author: james
:comments_form: |-
  <form action="/comments-for?snip=SNIP_NAME" method="POST">
    <textarea name="comment"></textarea>
    <button>Submit</button>
  </form>
